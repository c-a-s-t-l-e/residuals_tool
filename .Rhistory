updateSelectInput(session, "y_var", choices = names(rv$data))
})
# Reset data
observeEvent(input$reset, {
if (!is.null(rv$data)) {
rv$removed_points <- NULL
}
})
# Calculate regression diagnostics
regression_data <- reactive({
req(rv$data, input$x_var, input$y_var)
current_data <- rv$data
if (!is.null(rv$removed_points)) {
current_data <- current_data[-rv$removed_points,]
}
model <- lm(as.formula(paste(input$y_var, "~", input$x_var)), data = current_data)
# Calculate diagnostic measures
n <- nrow(current_data)
p <- 2  # number of parameters in simple linear regression
cooks_d <- cooks.distance(model)
leverage <- hatvalues(model)
studentized_residuals <- rstudent(model)
# Thresholds with user-defined multipliers
cooks_threshold <- input$cooks_multiplier/n
leverage_threshold <- input$leverage_multiplier * p/n
diagnostic_df <- data.frame(
row = 1:n,
x = current_data[[input$x_var]],
y = current_data[[input$y_var]],
cooks_d = cooks_d,
leverage = leverage,
studentized_residuals = studentized_residuals,
influential = cooks_d > cooks_threshold | leverage > leverage_threshold
)
list(
model = model,
diagnostic_df = diagnostic_df,
cooks_threshold = cooks_threshold,
leverage_threshold = leverage_threshold
)
})
# Regression plot
output$regPlot <- renderPlot({
req(regression_data())
reg_data <- regression_data()
ggplot(reg_data$diagnostic_df, aes(x = x, y = y)) +
geom_point(aes(color = influential)) +
geom_smooth(method = "lm", se = TRUE) +
labs(x = input$x_var, y = input$y_var,
title = "Regression Plot with Influential Points Highlighted") +
theme_minimal()
})
# Diagnostic plots
output$diagnosticPlots <- renderPlot({
req(regression_data())
reg_data <- regression_data()
par(mfrow = c(1, 2))
# Cook's Distance plot
plot(reg_data$diagnostic_df$cooks_d, type = "h",
main = "Cook's Distance",
ylab = "Cook's Distance",
xlab = "Observation Number")
abline(h = reg_data$cooks_threshold, col = "red", lty = 2)
# Leverage plot
plot(reg_data$diagnostic_df$leverage, type = "h",
main = "Leverage",
ylab = "Leverage",
xlab = "Observation Number")
abline(h = reg_data$leverage_threshold, col = "red", lty = 2)
})
# Table of influential points
output$influentialPoints <- renderDT({
req(regression_data())
reg_data <- regression_data()
influential <- reg_data$diagnostic_df[reg_data$diagnostic_df$influential, ]
if(nrow(influential) > 0) {
influential |>
select(row, x, y, cooks_d, leverage, studentized_residuals) |>
round(4)
}
})
# R code output
output$rcode <- renderText({
req(input$x_var, input$y_var)
paste0(
"# Load required packages\n",
"library(dplyr)\n\n",
"# Fit linear regression model\n",
sprintf("model <- lm(%s ~ %s, data = your_data)\n\n", input$y_var, input$x_var),
"# Calculate diagnostic measures\n",
"n <- nrow(your_data)\n",
"p <- 2  # number of parameters in simple linear regression\n\n",
"# Calculate thresholds\n",
sprintf("cooks_threshold <- %s/n\n", input$cooks_multiplier),
sprintf("leverage_threshold <- %s * p/n\n\n", input$leverage_multiplier),
"# Calculate diagnostic statistics\n",
"diagnostic_df <- data.frame(\n",
"  cooks_d = cooks.distance(model),\n",
"  leverage = hatvalues(model),\n",
"  studentized_residuals = rstudent(model)\n",
")\n\n",
"# Identify influential points\n",
"influential <- diagnostic_df$cooks_d > cooks_threshold |\n",
"  diagnostic_df$leverage > leverage_threshold\n\n",
"# Get indices of influential points\n",
"influential_points <- which(influential)\n"
)
})
}
shinyApp(ui, server)
library(shiny)
library(bslib)
library(dplyr)
library(ggplot2)
library(DT)
ui <- page_fluid(
card(
card_header("Regression Testing App"),
layout_sidebar(
sidebar = sidebar(
fileInput("file", "Upload CSV File"),
selectInput("x_var", "Select X Variable", choices = NULL),
selectInput("y_var", "Select Y Variable", choices = NULL),
numericInput("cooks_multiplier", "Cook's Distance Threshold Multiplier",
value = 4, min = 0, step = 0.1),
numericInput("leverage_multiplier", "Leverage Threshold Multiplier",
value = 2, min = 0, step = 0.1),
actionButton("reset", "Reset Data", class = "btn-warning")
),
card(
card_header("Regression Analysis"),
navset_tab(
nav_panel(
"Diagnostic Plots",
plotOutput("regPlot"),
plotOutput("diagnosticPlots"),
br(), br(),  # Added extra spacing here
h3("Influential Points"),
DTOutput("influentialPoints")
),
nav_panel(
"R Code",
verbatimTextOutput("rcode")
)
)
)
)
)
)
server <- function(input, output, session) {
# Reactive values for data
rv <- reactiveValues(
data = NULL,
removed_points = NULL
)
# Read data when file is uploaded
observeEvent(input$file, {
rv$data <- read.csv(input$file$datapath)
rv$removed_points <- NULL
updateSelectInput(session, "x_var", choices = names(rv$data))
updateSelectInput(session, "y_var", choices = names(rv$data))
})
# Reset data
observeEvent(input$reset, {
if (!is.null(rv$data)) {
rv$removed_points <- NULL
}
})
# Calculate regression diagnostics
regression_data <- reactive({
req(rv$data, input$x_var, input$y_var)
current_data <- rv$data
if (!is.null(rv$removed_points)) {
current_data <- current_data[-rv$removed_points,]
}
model <- lm(as.formula(paste(input$y_var, "~", input$x_var)), data = current_data)
# Calculate diagnostic measures
n <- nrow(current_data)
p <- 2  # number of parameters in simple linear regression
cooks_d <- cooks.distance(model)
leverage <- hatvalues(model)
studentized_residuals <- rstudent(model)
# Thresholds with user-defined multipliers
cooks_threshold <- input$cooks_multiplier/n
leverage_threshold <- input$leverage_multiplier * p/n
diagnostic_df <- data.frame(
row = 1:n,
x = current_data[[input$x_var]],
y = current_data[[input$y_var]],
cooks_d = cooks_d,
leverage = leverage,
studentized_residuals = studentized_residuals,
influential = cooks_d > cooks_threshold | leverage > leverage_threshold
)
list(
model = model,
diagnostic_df = diagnostic_df,
cooks_threshold = cooks_threshold,
leverage_threshold = leverage_threshold
)
})
# Regression plot
output$regPlot <- renderPlot({
req(regression_data())
reg_data <- regression_data()
ggplot(reg_data$diagnostic_df, aes(x = x, y = y)) +
geom_point(aes(color = influential)) +
geom_smooth(method = "lm", se = TRUE) +
labs(x = input$x_var, y = input$y_var,
title = "Regression Plot with Influential Points Highlighted") +
theme_minimal()
})
# Diagnostic plots
output$diagnosticPlots <- renderPlot({
req(regression_data())
reg_data <- regression_data()
par(mfrow = c(1, 2))
# Cook's Distance plot
plot(reg_data$diagnostic_df$cooks_d, type = "h",
main = "Cook's Distance",
ylab = "Cook's Distance",
xlab = "Observation Number")
abline(h = reg_data$cooks_threshold, col = "red", lty = 2)
# Leverage plot
plot(reg_data$diagnostic_df$leverage, type = "h",
main = "Leverage",
ylab = "Leverage",
xlab = "Observation Number")
abline(h = reg_data$leverage_threshold, col = "red", lty = 2)
})
# Table of influential points
output$influentialPoints <- renderDT({
req(regression_data())
reg_data <- regression_data()
influential <- reg_data$diagnostic_df[reg_data$diagnostic_df$influential, ]
if(nrow(influential) > 0) {
influential |>
select(row, x, y, cooks_d, leverage, studentized_residuals) |>
round(4)
}
})
# R code output
output$rcode <- renderText({
req(input$x_var, input$y_var)
paste0(
"# Load required packages\n",
"library(dplyr)\n\n",
"# Fit linear regression model\n",
sprintf("model <- lm(%s ~ %s, data = your_data)\n\n", input$y_var, input$x_var),
"# Calculate diagnostic measures\n",
"n <- nrow(your_data)\n",
"p <- 2  # number of parameters in simple linear regression\n\n",
"# Calculate thresholds\n",
sprintf("cooks_threshold <- %s/n\n", input$cooks_multiplier),
sprintf("leverage_threshold <- %s * p/n\n\n", input$leverage_multiplier),
"# Calculate diagnostic statistics\n",
"diagnostic_df <- data.frame(\n",
"  cooks_d = cooks.distance(model),\n",
"  leverage = hatvalues(model),\n",
"  studentized_residuals = rstudent(model)\n",
")\n\n",
"# Identify influential points\n",
"influential <- diagnostic_df$cooks_d > cooks_threshold |\n",
"  diagnostic_df$leverage > leverage_threshold\n\n",
"# Get indices of influential points\n",
"influential_points <- which(influential)\n"
)
})
}
shinyApp(ui, server)
library(shiny)
library(bslib)
library(dplyr)
library(ggplot2)
library(DT)
ui <- page_fluid(
card(
card_header("Regression Testing App"),
layout_sidebar(
sidebar = sidebar(
fileInput("file", "Upload CSV File"),
selectInput("x_var", "Select X Variable", choices = NULL),
selectInput("y_var", "Select Y Variable", choices = NULL),
numericInput("cooks_multiplier", "Cook's Distance Threshold Multiplier",
value = 4, min = 0, step = 0.1),
numericInput("leverage_multiplier", "Leverage Threshold Multiplier",
value = 2, min = 0, step = 0.1),
actionButton("reset", "Reset Data", class = "btn-warning")
),
card(
card_header("Regression Analysis"),
navset_tab(
nav_panel(
"Diagnostic Plots",
plotOutput("regPlot"),
plotOutput("diagnosticPlots"),
br(), br(),  # Added extra spacing here
h3("Influential Points"),
DTOutput("influentialPoints")
),
nav_panel(
"R Code",
verbatimTextOutput("rcode")
)
)
)
)
)
)
server <- function(input, output, session) {
# Reactive values for data
rv <- reactiveValues(
data = NULL,
removed_points = NULL
)
# Read data when file is uploaded
observeEvent(input$file, {
rv$data <- read.csv(input$file$datapath)
rv$removed_points <- NULL
updateSelectInput(session, "x_var", choices = names(rv$data))
updateSelectInput(session, "y_var", choices = names(rv$data))
})
# Reset data
observeEvent(input$reset, {
if (!is.null(rv$data)) {
rv$removed_points <- NULL
}
})
# Calculate regression diagnostics
regression_data <- reactive({
req(rv$data, input$x_var, input$y_var)
current_data <- rv$data
if (!is.null(rv$removed_points)) {
current_data <- current_data[-rv$removed_points,]
}
model <- lm(as.formula(paste(input$y_var, "~", input$x_var)), data = current_data)
# Calculate diagnostic measures
n <- nrow(current_data)
p <- 2  # number of parameters in simple linear regression
cooks_d <- cooks.distance(model)
leverage <- hatvalues(model)
studentized_residuals <- rstudent(model)
# Thresholds with user-defined multipliers
cooks_threshold <- input$cooks_multiplier/n
leverage_threshold <- input$leverage_multiplier * p/n
diagnostic_df <- data.frame(
row = 1:n,
x = current_data[[input$x_var]],
y = current_data[[input$y_var]],
cooks_d = cooks_d,
leverage = leverage,
studentized_residuals = studentized_residuals,
influential = cooks_d > cooks_threshold | leverage > leverage_threshold
)
list(
model = model,
diagnostic_df = diagnostic_df,
cooks_threshold = cooks_threshold,
leverage_threshold = leverage_threshold
)
})
# Regression plot
output$regPlot <- renderPlot({
req(regression_data())
reg_data <- regression_data()
ggplot(reg_data$diagnostic_df, aes(x = x, y = y)) +
geom_point(aes(color = influential)) +
geom_smooth(method = "lm", se = TRUE) +
labs(x = input$x_var, y = input$y_var,
title = "Regression Plot with Influential Points Highlighted") +
theme_minimal()
})
# Diagnostic plots
output$diagnosticPlots <- renderPlot({
req(regression_data())
reg_data <- regression_data()
par(mfrow = c(1, 2))
# Cook's Distance plot
plot(reg_data$diagnostic_df$cooks_d, type = "h",
main = "Cook's Distance",
ylab = "Cook's Distance",
xlab = "Observation Number")
abline(h = reg_data$cooks_threshold, col = "red", lty = 2)
# Leverage plot
plot(reg_data$diagnostic_df$leverage, type = "h",
main = "Leverage",
ylab = "Leverage",
xlab = "Observation Number")
abline(h = reg_data$leverage_threshold, col = "red", lty = 2)
})
# Table of influential points
output$influentialPoints <- renderDT({
req(regression_data())
reg_data <- regression_data()
influential <- reg_data$diagnostic_df[reg_data$diagnostic_df$influential, ]
if(nrow(influential) > 0) {
influential |>
select(row, x, y, cooks_d, leverage, studentized_residuals) |>
round(4)
}
})
# R code output
output$rcode <- renderText({
req(input$x_var, input$y_var)
paste0(
"# Load required packages\n",
"library(dplyr)\n\n",
"# Fit linear regression model\n",
sprintf("model <- lm(%s ~ %s, data = your_data)\n\n", input$y_var, input$x_var),
"# Calculate diagnostic measures\n",
"n <- nrow(your_data)\n",
"p <- 2  # number of parameters in simple linear regression\n\n",
"# Calculate thresholds\n",
sprintf("cooks_threshold <- %s/n\n", input$cooks_multiplier),
sprintf("leverage_threshold <- %s * p/n\n\n", input$leverage_multiplier),
"# Calculate diagnostic statistics\n",
"diagnostic_df <- data.frame(\n",
"  cooks_d = cooks.distance(model),\n",
"  leverage = hatvalues(model),\n",
"  studentized_residuals = rstudent(model)\n",
")\n\n",
"# Identify influential points\n",
"influential <- diagnostic_df$cooks_d > cooks_threshold |\n",
"  diagnostic_df$leverage > leverage_threshold\n\n",
"# Get indices of influential points\n",
"influential_points <- which(influential)\n"
)
})
}
shinyApp(ui, server)
library(shiny)
library(bslib)
library(dplyr)
library(ggplot2)
library(DT)
# Create a custom theme
my_theme <- bs_theme(
version = 5,
bootswatch = "superhero",
primary = "#4B0082",  # Deep purple
"card-bg" = "#1E2A3B",
"body-bg" = "#0F1723",
"body-color" = "#E0E0E0"
) |>
bs_add_rules(sass::sass_file("custom.scss"))
runApp('~/Documents/y_2024/m_september_2024/applied_linear/linear_regression_tool/app')
runApp('~/Documents/y_2024/m_september_2024/applied_linear/linear_regression_tool/app')
runApp('~/Documents/y_2024/m_september_2024/applied_linear/linear_regression_tool/app')
runApp('~/Documents/y_2024/m_september_2024/applied_linear/linear_regression_tool/app')
runApp('~/Documents/y_2024/m_september_2024/applied_linear/linear_regression_tool/app')
runApp('~/Documents/y_2024/m_september_2024/applied_linear/linear_regression_tool/app')
runApp('~/Documents/y_2024/m_september_2024/applied_linear/linear_regression_tool/app')
runApp('~/Documents/y_2024/m_september_2024/applied_linear/linear_regression_tool/app')
setwd("~/Documents/y_2024/m_september_2024/applied_linear/linear_regression_tool/regression_tool")
shinylive::export(appdir = "app", destdir = "docs")
runApp('~/r_projects/three_part_aspire/aspire_example/app')
runApp('app')
runApp('app')
shinylive::export(appdir = "app", destdir = "docs")
runApp('app')
shinylive::export(appdir = "app", destdir = "docs")
shinylive::export(appdir = "app", destdir = "docs")
setwd("~/Documents/y_2024/m_september_2024/applied_linear/residuals_tool")
shinylive::export(appdir = "app", destdir = "docs")
shinylive::export(appdir = "app", destdir = "docs")
runApp('~/Documents/y_2024/m_september_2024/applied_linear/linear_regression_tool/regression_tool/app')
runApp('app')
runApp('app')
runApp('app')
runApp('residuals_tool/app')
shinylive::export(appdir = "app", destdir = "docs")
setwd("~/Documents/y_2024/m_september_2024/applied_linear/residuals_tool/residuals_tool")
shinylive::export(appdir = "app", destdir = "docs")
runApp('app')
shinylive::export(appdir = "app", destdir = "docs")
knitr::opts_chunk$set(echo = TRUE)
# get the basic linear model
taco_lm <- lm(Price ~ Mileage, data=taco_data)
library(tidyverse)
library(MASS)
# load the taco data
taco_data <- read_csv("tacoma_data.csv")
# fit the linear model
model <- lm(sqrt(Price) ~ Mileage, data = taco_data)
# create a sequence of x values for the curve
x_values <- seq(min(taco_data$Mileage), max(taco_data$Mileage), length.out = 100)
# create a data frame for the curve
curve_data <- data.frame(Mileage = x_values, Price = (coef(model)[1] + coef(model)[2]*x_values)^2)
# create a data frame for the additional points
points_data <- data.frame(Mileage = c(16000, 190000), Price = c(30000, (coef(model)[1] + coef(model)[2]*190000)^2))
predictions <- predict(model, interval = "predict")
all_taco_data <- cbind(taco_data, predictions)
# plot the data
ggplot() +
geom_point(data = all_taco_data, aes(x = Mileage, y = Price), color = "gray45", size = 2) +
geom_line(data = curve_data, aes(x = Mileage, y = Price), color = "green", size = 1) +
geom_point(data = points_data, aes(x = Mileage, y = Price), color = "red", size = 3) +
geom_line(data = points_data, aes(x = Mileage, y = Price), color = "blue", size = 1) +
#geom_line(data = all_taco_data, aes(y=lwr), col='coral2', linetype='dashed') +
#geom_line(data = all_taco_data, aes(y = upr), col='coral2', linetype='dashed') +
labs(title = "There's a Gradual, but Stable Decrease in Price for Tacomas",
x = "Mileage",
y = "Price ($)") +
theme_classic() +
theme(
plot.title = element_text(hjust = 0.5)
)
# get the basic linear model
taco_lm <- lm(Price ~ Mileage, data=taco_data)
summary(taco_lm)
# use the boxcox function
b <- boxcox(taco_lm)

[{"name":"app.R","content":"library(shiny)\nlibrary(bslib)\nlibrary(tidyverse)\n\nlibrary(shiny)\nlibrary(bslib)\nlibrary(tidyverse)\n\nui <- page_navbar(\n  title = \"Regression Statistics Calculator\",\n  theme = bs_theme(bootswatch = \"flatly\"),\n  \n  nav_panel(\"Visualization & Results\",\n            layout_sidebar(\n              sidebar = sidebar(\n                fileInput(\"file\", \"Upload CSV file\"),\n                selectInput(\"x_var\", \"Select X Variable\", choices = NULL),\n                selectInput(\"y_var\", \"Select Y Variable\", choices = NULL),\n                checkboxGroupInput(\"show_elements\", \"Show on Plot:\",\n                                   choices = c(\n                                     \"Residuals\" = \"residuals\",\n                                     \"Mean Line\" = \"mean_line\",\n                                     \"Fitted Values\" = \"fitted\",\n                                     \"SSE Components\" = \"sse\",\n                                     \"SSR Components\" = \"ssr\",\n                                     \"RSE Bands\" = \"rse_bands\"\n                                   ),\n                                   selected = \"residuals\"\n                )\n              ),\n              \n              layout_columns(\n                card(\n                  card_header(\"Scatter Plot with Regression Line\"),\n                  plotOutput(\"scatter_plot\", height = \"500px\")\n                ),\n                layout_columns(\n                  card(\n                    card_header(\"Error Statistics\"),\n                    card_body(\n                      tooltip(\n                        span(\n                          \"RSE:\",\n                          textOutput(\"rse_value\", inline = TRUE)\n                        ),\n                        \"Residual Standard Error: A measure of the average deviation of observations from the regression line\"\n                      ),\n                      tooltip(\n                        span(\n                          \"MSE:\",\n                          textOutput(\"mse_value\", inline = TRUE)\n                        ),\n                        \"Mean Squared Error: The average squared difference between observed and predicted values\"\n                      ),\n                      br(),\n                      h5(\"Residuals Breakdown:\"),\n                      tableOutput(\"residuals_table\")\n                    )\n                  ),\n                  card(\n                    card_header(\"Statistical Results\"),\n                    tableOutput(\"stats_table\")\n                  )\n                )\n              )\n            )\n  ),\n  \n  nav_panel(\"Calculations & Code\",\n            card(\n              card_header(\"Mathematical Formulas and R Code\"),\n              HTML(\"\n        <h4>Formulas:<\/h4>\n        <ul>\n          <li>Residual (e<sub>i<\/sub>) = y<sub>i<\/sub> - ŷ<sub>i<\/sub><\/li>\n          <li>SSE (Sum of Squared Errors) = Σ(y<sub>i<\/sub> - ŷ<sub>i<\/sub>)²<\/li>\n          <li>SSR (Sum of Squares Regression) = Σ(ŷ<sub>i<\/sub> - ȳ)²<\/li>\n          <li>SSTO (Total Sum of Squares) = Σ(y<sub>i<\/sub> - ȳ)²<\/li>\n          <li>R² = SSR/SSTO = 1 - SSE/SSTO<\/li>\n          <li><strong>MSE (Mean Squared Error) = SSE/(n-2)<\/strong><\/li>\n          <li><strong>Residual Standard Error = √MSE<\/strong><\/li>\n        <\/ul>\n      \"),\n              verbatimTextOutput(\"r_code\")\n            )\n  )\n)\n\n\nserver <- function(input, output, session) {\n  data <- reactive({\n    req(input$file)\n    read.csv(input$file$datapath)\n  })\n  \n  observeEvent(data(), {\n    choices <- names(data())\n    updateSelectInput(session, \"x_var\", choices = choices)\n    updateSelectInput(session, \"y_var\", choices = choices)\n  })\n  \n  model_results <- reactive({\n    req(input$x_var, input$y_var)\n    \n    x <- data()[[input$x_var]]\n    y <- data()[[input$y_var]]\n    \n    validate(\n      need(!is.null(x) && !is.null(y), \"Please select both X and Y variables\"),\n      need(all(is.finite(x)), \"X variable contains non-finite values\"),\n      need(all(is.finite(y)), \"Y variable contains non-finite values\")\n    )\n    \n    model_data <- data.frame(y = y, x = x)\n    model <- try(lm(y ~ x, data = model_data), silent = TRUE)\n    \n    if (inherits(model, \"try-error\")) {\n      return(NULL)\n    }\n    \n    y_hat <- fitted(model)\n    residuals <- residuals(model)\n    y_mean <- mean(y)\n    \n    sse <- sum(residuals^2)\n    ssr <- sum((y_hat - y_mean)^2)\n    ssto <- sum((y - y_mean)^2)\n    \n    r_squared <- ssr/ssto\n    n <- length(y)\n    mse <- sse/(n-2)\n    res_std_error <- sqrt(mse)\n    \n    list(\n      model = model,\n      summary = summary(model),\n      sse = sse,\n      ssr = ssr,\n      ssto = ssto,\n      r_squared = r_squared,\n      mse = mse,\n      res_std_error = res_std_error,\n      x = x,\n      y = y,\n      y_hat = y_hat,\n      y_mean = y_mean,\n      residuals = residuals,\n      n = n\n    )\n  })\n  \n  output$scatter_plot <- renderPlot({\n    req(input$x_var, input$y_var)\n    res <- req(model_results())\n    validate(need(!is.null(res), \"Unable to create plot: model fitting failed\"))\n    \n    tryCatch({\n      plot_data <- data.frame(\n        x = res$x,\n        y = res$y,\n        y_hat = res$y_hat,\n        residuals = res$residuals\n      )\n      \n      # Initialize base plot\n      p <- ggplot(plot_data, aes(x = x, y = y)) +\n        theme_minimal(base_size = 14) +\n        labs(x = input$x_var, y = input$y_var) +\n        geom_point(size = 3)\n      \n      # Add regression line and bands\n      if (\"rse_bands\" %in% input$show_elements) {\n        # Use the original x values for prediction\n        new_data <- data.frame(x = res$x)\n        names(new_data) <- input$x_var\n        pred <- predict(res$model, newdata = new_data, interval = \"confidence\")\n        \n        line_data <- data.frame(\n          x = res$x,\n          fit = pred[,\"fit\"],\n          lwr = pred[,\"lwr\"],\n          upr = pred[,\"upr\"]\n        )\n        \n        p <- p + \n          geom_ribbon(data = line_data,\n                      aes(x = x, y = fit, ymin = lwr, ymax = upr),\n                      alpha = 0.2,\n                      fill = \"blue\") +\n          geom_line(data = line_data,\n                    aes(x = x, y = fit),\n                    color = \"blue\",\n                    linewidth = 1)\n      } else {\n        p <- p + geom_smooth(method = \"lm\", se = FALSE, color = \"blue\", linewidth = 1)\n      }\n      \n      if (\"mean_line\" %in% input$show_elements) {\n        p <- p + geom_hline(yintercept = res$y_mean, \n                            color = \"darkgreen\", \n                            linetype = \"dashed\")\n      }\n      \n      if (\"fitted\" %in% input$show_elements) {\n        p <- p + geom_point(aes(y = y_hat), color = \"blue\", size = 3, shape = 1)\n      }\n      \n      if (\"residuals\" %in% input$show_elements) {\n        p <- p + geom_segment(aes(x = x, y = y, xend = x, yend = y_hat),\n                              color = \"red\", linetype = \"dashed\")\n      }\n      \n      if (\"ssr\" %in% input$show_elements) {\n        p <- p + geom_segment(aes(x = x, y = y_hat, xend = x, yend = res$y_mean),\n                              color = \"blue\", alpha = 0.5)\n      }\n      \n      if (\"sse\" %in% input$show_elements) {\n        p <- p + geom_segment(aes(x = x, y = y, xend = x, yend = y_hat),\n                              color = \"red\", alpha = 0.5)\n      }\n      \n      if (\"mse_components\" %in% input$show_elements) {\n        residuals_sq <- res$residuals^2\n        max_residual_sq <- max(residuals_sq)\n        box_width <- diff(range(res$x)) * 0.05\n        \n        squares_data <- data.frame(\n          x = res$x,\n          y = res$y,\n          y_hat = res$y_hat,\n          residual = res$residuals,\n          residual_sq = residuals_sq,\n          box_size = sqrt(residuals_sq/max_residual_sq) * box_width\n        )\n        \n        for(i in seq_len(nrow(squares_data))) {\n          square <- squares_data[i, ]\n          p <- p + \n            geom_rect(data = square,\n                      aes(xmin = x - box_size/2,\n                          xmax = x + box_size/2,\n                          ymin = y_hat - box_size/2,\n                          ymax = y_hat + box_size/2),\n                      fill = \"orange\",\n                      alpha = 0.3) +\n            geom_segment(data = square,\n                         aes(x = x, y = y, xend = x, yend = y_hat),\n                         color = \"red\",\n                         linetype = \"dashed\") +\n            annotate(\"text\",\n                     x = square$x,\n                     y = square$y_hat,\n                     label = sprintf(\"%.2f²\\n=%.2f\", abs(square$residual), square$residual_sq),\n                     size = 3)\n        }\n        \n        p <- p + annotate(\"text\",\n                          x = mean(range(res$x)),\n                          y = max(res$y),\n                          label = sprintf(\"MSE = Σ(residuals²)/(n-2) = %.2f\", res$mse),\n                          size = 4,\n                          fontface = \"bold\")\n      }\n      \n      p\n      \n    }, error = function(e) {\n      ggplot() + theme_void() + \n        annotate(\"text\", x = 0, y = 0, label = \"Error creating plot\")\n    })\n  })\n  \n  output$residuals_table <- renderTable({\n    res <- model_results()\n    data.frame(\n      Point = seq_len(length(res$residuals)),\n      `Observed Y` = round(res$y, 4),\n      `Predicted Y` = round(res$y_hat, 4),\n      Residual = round(res$residuals, 4),\n      `Squared Residual` = round(res$residuals^2, 4)\n    )\n  }, digits = 4)\n  \n  output$stats_table <- renderTable({\n    res <- model_results()\n    data.frame(\n      Statistic = c(\n        \"SSE (Sum of Squared Errors)\",\n        \"SSR (Sum of Squares Regression)\",\n        \"SSTO (Total Sum of Squares)\",\n        \"R²\",\n        \"MSE (Mean Squared Error)\",\n        \"Residual Standard Error\"\n      ),\n      Value = c(\n        res$sse,\n        res$ssr,\n        res$ssto,\n        res$r_squared,\n        res$mse,\n        res$res_std_error\n      )\n    )\n  }, digits = 4)\n  \n  output$r_code <- renderText({\n    sprintf('\n# R code for calculations:\nx <- data$%s\ny <- data$%s\n\n# Fit linear model\nmodel <- lm(y ~ x)\n\n# Get fitted values and residuals\ny_hat <- fitted(model)\nresiduals <- residuals(model)\ny_mean <- mean(y)\n\n# Calculate sums of squares\nSSE <- sum(residuals^2)\nSSR <- sum((y_hat - y_mean)^2)\nSSTO <- sum((y - y_mean)^2)\n\n# Calculate R-squared\nR2 <- SSR/SSTO\n\n# Calculate MSE and RSE\nn <- length(y)\nMSE <- SSE/(n-2)\nRSE <- sqrt(MSE)\n    ', input$x_var, input$y_var)\n  })\n}\n\nshinyApp(ui, server)","type":"text"}]
